
ButtonFlashInt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  00000464  000004f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000464  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080020c  0080020c  00000504  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000534  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001010  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d38  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000668  00000000  00000000  0000231c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00002984  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f0  00000000  00000000  00002a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000213  00000000  00000000  00003008  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000321b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	04 c2       	rjmp	.+1032   	; 0x42e <__vector_9>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e6       	ldi	r30, 0x64	; 100
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 31       	cpi	r26, 0x10	; 16
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	6c d1       	rcall	.+728    	; 0x3f8 <main>
 120:	9f c1       	rjmp	.+830    	; 0x460 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <delay>:
}

void delay(unsigned int msec) {
	
	int pins;
	unsigned int count = msec / 5;
 124:	9c 01       	movw	r18, r24
 126:	ad ec       	ldi	r26, 0xCD	; 205
 128:	bc ec       	ldi	r27, 0xCC	; 204
 12a:	8b d1       	rcall	.+790    	; 0x442 <__umulhisi3>
 12c:	96 95       	lsr	r25
 12e:	87 95       	ror	r24
 130:	96 95       	lsr	r25
 132:	87 95       	ror	r24
	int done = 0;
	int bothPressed = 0;
 134:	40 e0       	ldi	r20, 0x00	; 0
 136:	50 e0       	ldi	r21, 0x00	; 0
				done = 1;
			}
			break;
			
			case 0x0: //both buttons pressed
			bothPressed = 1;
 138:	71 e0       	ldi	r23, 0x01	; 1
 13a:	60 e0       	ldi	r22, 0x00	; 0
	int done = 0;
	int bothPressed = 0;
	
	while(!done) {
		pins = (PINF >> 6) & 0x3;
		switch (pins) {
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	e0 e0       	ldi	r30, 0x00	; 0
	unsigned int count = msec / 5;
	int done = 0;
	int bothPressed = 0;
	
	while(!done) {
		pins = (PINF >> 6) & 0x3;
 140:	2f b1       	in	r18, 0x0f	; 15
		switch (pins) {
 142:	22 95       	swap	r18
 144:	26 95       	lsr	r18
 146:	26 95       	lsr	r18
 148:	23 70       	andi	r18, 0x03	; 3
 14a:	21 30       	cpi	r18, 0x01	; 1
 14c:	e1 f0       	breq	.+56     	; 0x186 <delay+0x62>
 14e:	38 f1       	brcs	.+78     	; 0x19e <delay+0x7a>
 150:	22 30       	cpi	r18, 0x02	; 2
 152:	71 f0       	breq	.+28     	; 0x170 <delay+0x4c>
 154:	23 30       	cpi	r18, 0x03	; 3
 156:	09 f0       	breq	.+2      	; 0x15a <delay+0x36>
 158:	e1 c0       	rjmp	.+450    	; 0x31c <delay+0x1f8>
			case 0x3: //no buttons pressed
			while((count > 0) && (0x3 == ((PINF >> 6) & 0x3))) {
 15a:	00 97       	sbiw	r24, 0x00	; 0
 15c:	09 f4       	brne	.+2      	; 0x160 <delay+0x3c>
 15e:	e9 c0       	rjmp	.+466    	; 0x332 <delay+0x20e>
 160:	2f b1       	in	r18, 0x0f	; 15
 162:	22 95       	swap	r18
 164:	26 95       	lsr	r18
 166:	26 95       	lsr	r18
 168:	23 70       	andi	r18, 0x03	; 3
 16a:	23 30       	cpi	r18, 0x03	; 3
 16c:	29 f1       	breq	.+74     	; 0x1b8 <delay+0x94>
 16e:	e8 cf       	rjmp	.-48     	; 0x140 <delay+0x1c>
				count--;
			}
			break;
			
			case 0x2: //button0 pressed
			while((count > 0) && (0x2 == ((PINF >> 6) & 0x3))) {
 170:	00 97       	sbiw	r24, 0x00	; 0
 172:	09 f4       	brne	.+2      	; 0x176 <delay+0x52>
 174:	41 c0       	rjmp	.+130    	; 0x1f8 <delay+0xd4>
 176:	2f b1       	in	r18, 0x0f	; 15
 178:	22 95       	swap	r18
 17a:	26 95       	lsr	r18
 17c:	26 95       	lsr	r18
 17e:	23 70       	andi	r18, 0x03	; 3
 180:	22 30       	cpi	r18, 0x02	; 2
 182:	59 f1       	breq	.+86     	; 0x1da <delay+0xb6>
 184:	39 c0       	rjmp	.+114    	; 0x1f8 <delay+0xd4>
				done = 1;
			}
			break;
			
			case 0x1: //button1 pressed
			for(; ((count > 0) && (0x1 == ((PINF >> 6) & 0x3))); count--) {
 186:	00 97       	sbiw	r24, 0x00	; 0
 188:	09 f4       	brne	.+2      	; 0x18c <delay+0x68>
 18a:	7e c0       	rjmp	.+252    	; 0x288 <delay+0x164>
 18c:	2f b1       	in	r18, 0x0f	; 15
 18e:	22 95       	swap	r18
 190:	26 95       	lsr	r18
 192:	26 95       	lsr	r18
 194:	23 70       	andi	r18, 0x03	; 3
 196:	21 30       	cpi	r18, 0x01	; 1
 198:	09 f4       	brne	.+2      	; 0x19c <delay+0x78>
 19a:	67 c0       	rjmp	.+206    	; 0x26a <delay+0x146>
 19c:	75 c0       	rjmp	.+234    	; 0x288 <delay+0x164>
			}
			break;
			
			case 0x0: //both buttons pressed
			bothPressed = 1;
			for(; ((count > 0) && (0x0 == ((PINF >> 6) & 0x3))); count--) {
 19e:	00 97       	sbiw	r24, 0x00	; 0
 1a0:	09 f4       	brne	.+2      	; 0x1a4 <delay+0x80>
 1a2:	c7 c0       	rjmp	.+398    	; 0x332 <delay+0x20e>
 1a4:	2f b1       	in	r18, 0x0f	; 15
 1a6:	22 95       	swap	r18
 1a8:	26 95       	lsr	r18
 1aa:	26 95       	lsr	r18
 1ac:	23 70       	andi	r18, 0x03	; 3
 1ae:	09 f4       	brne	.+2      	; 0x1b2 <delay+0x8e>
 1b0:	a4 c0       	rjmp	.+328    	; 0x2fa <delay+0x1d6>
				done = 1;
			}
			break;
			
			case 0x0: //both buttons pressed
			bothPressed = 1;
 1b2:	47 2f       	mov	r20, r23
 1b4:	56 2f       	mov	r21, r22
 1b6:	c4 cf       	rjmp	.-120    	; 0x140 <delay+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	af e1       	ldi	r26, 0x1F	; 31
 1ba:	be e4       	ldi	r27, 0x4E	; 78
 1bc:	11 97       	sbiw	r26, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <delay+0x98>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <delay+0x9e>
 1c2:	00 00       	nop
		pins = (PINF >> 6) & 0x3;
		switch (pins) {
			case 0x3: //no buttons pressed
			while((count > 0) && (0x3 == ((PINF >> 6) & 0x3))) {
				_delay_ms(5);
				count--;
 1c4:	01 97       	sbiw	r24, 0x01	; 1
	
	while(!done) {
		pins = (PINF >> 6) & 0x3;
		switch (pins) {
			case 0x3: //no buttons pressed
			while((count > 0) && (0x3 == ((PINF >> 6) & 0x3))) {
 1c6:	09 f4       	brne	.+2      	; 0x1ca <delay+0xa6>
 1c8:	b4 c0       	rjmp	.+360    	; 0x332 <delay+0x20e>
 1ca:	2f b1       	in	r18, 0x0f	; 15
 1cc:	22 95       	swap	r18
 1ce:	26 95       	lsr	r18
 1d0:	26 95       	lsr	r18
 1d2:	23 70       	andi	r18, 0x03	; 3
 1d4:	23 30       	cpi	r18, 0x03	; 3
 1d6:	81 f3       	breq	.-32     	; 0x1b8 <delay+0x94>
 1d8:	b3 cf       	rjmp	.-154    	; 0x140 <delay+0x1c>
 1da:	af e1       	ldi	r26, 0x1F	; 31
 1dc:	be e4       	ldi	r27, 0x4E	; 78
 1de:	11 97       	sbiw	r26, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <delay+0xba>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <delay+0xc0>
 1e4:	00 00       	nop
			break;
			
			case 0x2: //button0 pressed
			while((count > 0) && (0x2 == ((PINF >> 6) & 0x3))) {
				_delay_ms(5);
				count--;
 1e6:	01 97       	sbiw	r24, 0x01	; 1
				count--;
			}
			break;
			
			case 0x2: //button0 pressed
			while((count > 0) && (0x2 == ((PINF >> 6) & 0x3))) {
 1e8:	39 f0       	breq	.+14     	; 0x1f8 <delay+0xd4>
 1ea:	2f b1       	in	r18, 0x0f	; 15
 1ec:	22 95       	swap	r18
 1ee:	26 95       	lsr	r18
 1f0:	26 95       	lsr	r18
 1f2:	23 70       	andi	r18, 0x03	; 3
 1f4:	22 30       	cpi	r18, 0x02	; 2
 1f6:	89 f3       	breq	.-30     	; 0x1da <delay+0xb6>
				_delay_ms(5);
				count--;
			}
			if((0x3 == ((PINF >> 6) & 0x3)) || (bothPressed && (0x2 == ((PINF >> 6) & 0x3)))) { //button0 released
 1f8:	2f b1       	in	r18, 0x0f	; 15
 1fa:	22 95       	swap	r18
 1fc:	26 95       	lsr	r18
 1fe:	26 95       	lsr	r18
 200:	23 70       	andi	r18, 0x03	; 3
 202:	23 30       	cpi	r18, 0x03	; 3
 204:	69 f0       	breq	.+26     	; 0x220 <delay+0xfc>
 206:	41 15       	cp	r20, r1
 208:	51 05       	cpc	r21, r1
 20a:	09 f4       	brne	.+2      	; 0x20e <delay+0xea>
 20c:	8f c0       	rjmp	.+286    	; 0x32c <delay+0x208>
 20e:	2f b1       	in	r18, 0x0f	; 15
 210:	22 95       	swap	r18
 212:	26 95       	lsr	r18
 214:	26 95       	lsr	r18
 216:	23 70       	andi	r18, 0x03	; 3
 218:	22 30       	cpi	r18, 0x02	; 2
 21a:	09 f0       	breq	.+2      	; 0x21e <delay+0xfa>
 21c:	87 c0       	rjmp	.+270    	; 0x32c <delay+0x208>
 21e:	03 c0       	rjmp	.+6      	; 0x226 <delay+0x102>
				if(bothPressed)
 220:	41 15       	cp	r20, r1
 222:	51 05       	cpc	r21, r1
 224:	89 f0       	breq	.+34     	; 0x248 <delay+0x124>
				state = stateTable[1][state];
 226:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <state>
 22a:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <state+0x1>
 22e:	aa 0f       	add	r26, r26
 230:	bb 1f       	adc	r27, r27
 232:	aa 5f       	subi	r26, 0xFA	; 250
 234:	bd 4f       	sbci	r27, 0xFD	; 253
 236:	2d 91       	ld	r18, X+
 238:	3c 91       	ld	r19, X
 23a:	30 93 0f 02 	sts	0x020F, r19	; 0x80020f <state+0x1>
 23e:	20 93 0e 02 	sts	0x020E, r18	; 0x80020e <state>
				else
				state = stateTable[0][state];
				done = 1;
 242:	27 2f       	mov	r18, r23
 244:	36 2f       	mov	r19, r22
 246:	6c c0       	rjmp	.+216    	; 0x320 <delay+0x1fc>
			}
			if((0x3 == ((PINF >> 6) & 0x3)) || (bothPressed && (0x2 == ((PINF >> 6) & 0x3)))) { //button0 released
				if(bothPressed)
				state = stateTable[1][state];
				else
				state = stateTable[0][state];
 248:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <state>
 24c:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <state+0x1>
 250:	aa 0f       	add	r26, r26
 252:	bb 1f       	adc	r27, r27
 254:	a0 50       	subi	r26, 0x00	; 0
 256:	be 4f       	sbci	r27, 0xFE	; 254
 258:	2d 91       	ld	r18, X+
 25a:	3c 91       	ld	r19, X
 25c:	30 93 0f 02 	sts	0x020F, r19	; 0x80020f <state+0x1>
 260:	20 93 0e 02 	sts	0x020E, r18	; 0x80020e <state>
				done = 1;
 264:	27 2f       	mov	r18, r23
 266:	36 2f       	mov	r19, r22
 268:	5b c0       	rjmp	.+182    	; 0x320 <delay+0x1fc>
 26a:	af e1       	ldi	r26, 0x1F	; 31
 26c:	be e4       	ldi	r27, 0x4E	; 78
 26e:	11 97       	sbiw	r26, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <delay+0x14a>
 272:	00 c0       	rjmp	.+0      	; 0x274 <delay+0x150>
 274:	00 00       	nop
			}
			break;
			
			case 0x1: //button1 pressed
			for(; ((count > 0) && (0x1 == ((PINF >> 6) & 0x3))); count--) {
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	39 f0       	breq	.+14     	; 0x288 <delay+0x164>
 27a:	2f b1       	in	r18, 0x0f	; 15
 27c:	22 95       	swap	r18
 27e:	26 95       	lsr	r18
 280:	26 95       	lsr	r18
 282:	23 70       	andi	r18, 0x03	; 3
 284:	21 30       	cpi	r18, 0x01	; 1
 286:	89 f3       	breq	.-30     	; 0x26a <delay+0x146>
				_delay_ms(5);
			}
			if((0x3 == ((PINF >> 6) & 0x3)) || (bothPressed && (0x1 == ((PINF >> 6) & 0x3)))) { //button1 released
 288:	2f b1       	in	r18, 0x0f	; 15
 28a:	22 95       	swap	r18
 28c:	26 95       	lsr	r18
 28e:	26 95       	lsr	r18
 290:	23 70       	andi	r18, 0x03	; 3
 292:	23 30       	cpi	r18, 0x03	; 3
 294:	69 f0       	breq	.+26     	; 0x2b0 <delay+0x18c>
 296:	41 15       	cp	r20, r1
 298:	51 05       	cpc	r21, r1
 29a:	09 f4       	brne	.+2      	; 0x29e <delay+0x17a>
 29c:	47 c0       	rjmp	.+142    	; 0x32c <delay+0x208>
 29e:	2f b1       	in	r18, 0x0f	; 15
 2a0:	22 95       	swap	r18
 2a2:	26 95       	lsr	r18
 2a4:	26 95       	lsr	r18
 2a6:	23 70       	andi	r18, 0x03	; 3
 2a8:	21 30       	cpi	r18, 0x01	; 1
 2aa:	09 f0       	breq	.+2      	; 0x2ae <delay+0x18a>
 2ac:	3f c0       	rjmp	.+126    	; 0x32c <delay+0x208>
 2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <delay+0x192>
				if(bothPressed)
 2b0:	41 15       	cp	r20, r1
 2b2:	51 05       	cpc	r21, r1
 2b4:	89 f0       	breq	.+34     	; 0x2d8 <delay+0x1b4>
				state = stateTable[0][state];
 2b6:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <state>
 2ba:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <state+0x1>
 2be:	aa 0f       	add	r26, r26
 2c0:	bb 1f       	adc	r27, r27
 2c2:	a0 50       	subi	r26, 0x00	; 0
 2c4:	be 4f       	sbci	r27, 0xFE	; 254
 2c6:	2d 91       	ld	r18, X+
 2c8:	3c 91       	ld	r19, X
 2ca:	30 93 0f 02 	sts	0x020F, r19	; 0x80020f <state+0x1>
 2ce:	20 93 0e 02 	sts	0x020E, r18	; 0x80020e <state>
				else
				state = stateTable[1][state];
				done = 1;
 2d2:	27 2f       	mov	r18, r23
 2d4:	36 2f       	mov	r19, r22
 2d6:	24 c0       	rjmp	.+72     	; 0x320 <delay+0x1fc>
			}
			if((0x3 == ((PINF >> 6) & 0x3)) || (bothPressed && (0x1 == ((PINF >> 6) & 0x3)))) { //button1 released
				if(bothPressed)
				state = stateTable[0][state];
				else
				state = stateTable[1][state];
 2d8:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <state>
 2dc:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <state+0x1>
 2e0:	aa 0f       	add	r26, r26
 2e2:	bb 1f       	adc	r27, r27
 2e4:	aa 5f       	subi	r26, 0xFA	; 250
 2e6:	bd 4f       	sbci	r27, 0xFD	; 253
 2e8:	2d 91       	ld	r18, X+
 2ea:	3c 91       	ld	r19, X
 2ec:	30 93 0f 02 	sts	0x020F, r19	; 0x80020f <state+0x1>
 2f0:	20 93 0e 02 	sts	0x020E, r18	; 0x80020e <state>
				done = 1;
 2f4:	27 2f       	mov	r18, r23
 2f6:	36 2f       	mov	r19, r22
 2f8:	13 c0       	rjmp	.+38     	; 0x320 <delay+0x1fc>
 2fa:	af e1       	ldi	r26, 0x1F	; 31
 2fc:	be e4       	ldi	r27, 0x4E	; 78
 2fe:	11 97       	sbiw	r26, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <delay+0x1da>
 302:	00 c0       	rjmp	.+0      	; 0x304 <delay+0x1e0>
 304:	00 00       	nop
			}
			break;
			
			case 0x0: //both buttons pressed
			bothPressed = 1;
			for(; ((count > 0) && (0x0 == ((PINF >> 6) & 0x3))); count--) {
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	a1 f0       	breq	.+40     	; 0x332 <delay+0x20e>
 30a:	2f b1       	in	r18, 0x0f	; 15
 30c:	22 95       	swap	r18
 30e:	26 95       	lsr	r18
 310:	26 95       	lsr	r18
 312:	23 70       	andi	r18, 0x03	; 3
 314:	91 f3       	breq	.-28     	; 0x2fa <delay+0x1d6>
				done = 1;
			}
			break;
			
			case 0x0: //both buttons pressed
			bothPressed = 1;
 316:	47 2f       	mov	r20, r23
 318:	56 2f       	mov	r21, r22
 31a:	12 cf       	rjmp	.-476    	; 0x140 <delay+0x1c>
	int done = 0;
	int bothPressed = 0;
	
	while(!done) {
		pins = (PINF >> 6) & 0x3;
		switch (pins) {
 31c:	2f 2f       	mov	r18, r31
 31e:	3e 2f       	mov	r19, r30
			for(; ((count > 0) && (0x0 == ((PINF >> 6) & 0x3))); count--) {
				_delay_ms(5);
			}
			break;
		}
		if(count == 0)
 320:	00 97       	sbiw	r24, 0x00	; 0
 322:	39 f0       	breq	.+14     	; 0x332 <delay+0x20e>
	int pins;
	unsigned int count = msec / 5;
	int done = 0;
	int bothPressed = 0;
	
	while(!done) {
 324:	23 2b       	or	r18, r19
 326:	09 f4       	brne	.+2      	; 0x32a <delay+0x206>
 328:	0b cf       	rjmp	.-490    	; 0x140 <delay+0x1c>
 32a:	08 95       	ret
			for(; ((count > 0) && (0x0 == ((PINF >> 6) & 0x3))); count--) {
				_delay_ms(5);
			}
			break;
		}
		if(count == 0)
 32c:	00 97       	sbiw	r24, 0x00	; 0
 32e:	09 f0       	breq	.+2      	; 0x332 <delay+0x20e>
 330:	07 cf       	rjmp	.-498    	; 0x140 <delay+0x1c>
 332:	08 95       	ret

00000334 <off>:
int stateTable[2][3] = {{1,0,1},
{2,2,0}};

//lights are off
void off() {
	if((PORTF & 0x0f) != 0)
 334:	81 b3       	in	r24, 0x11	; 17
 336:	8f 70       	andi	r24, 0x0F	; 15
 338:	19 f0       	breq	.+6      	; 0x340 <off+0xc>
	PORTF &= 0xf0;
 33a:	81 b3       	in	r24, 0x11	; 17
 33c:	80 7f       	andi	r24, 0xF0	; 240
 33e:	81 bb       	out	0x11, r24	; 17
	
	while(1) {
		delay(1000);
 340:	88 ee       	ldi	r24, 0xE8	; 232
 342:	93 e0       	ldi	r25, 0x03	; 3
 344:	ef de       	rcall	.-546    	; 0x124 <delay>
		if(state != 0)
 346:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <state>
 34a:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <state+0x1>
 34e:	89 2b       	or	r24, r25
 350:	b9 f3       	breq	.-18     	; 0x340 <off+0xc>
		return;
	}
}
 352:	08 95       	ret

00000354 <rotate>:

//rotate the lights being on from 0 - 3 each in turn
void rotate() {
	while(1) {
		PORTF |= 0x1;
 354:	88 9a       	sbi	0x11, 0	; 17
		delay(1000);
 356:	88 ee       	ldi	r24, 0xE8	; 232
 358:	93 e0       	ldi	r25, 0x03	; 3
 35a:	e4 de       	rcall	.-568    	; 0x124 <delay>
		PORTF &= 0xf0;
 35c:	81 b3       	in	r24, 0x11	; 17
 35e:	80 7f       	andi	r24, 0xF0	; 240
 360:	81 bb       	out	0x11, r24	; 17
		if(state != 1)
 362:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <state>
 366:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <state+0x1>
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	39 f5       	brne	.+78     	; 0x3bc <rotate+0x68>
		return;
		
		PORTF |= 0x2;
 36e:	89 9a       	sbi	0x11, 1	; 17
		delay(1000);
 370:	88 ee       	ldi	r24, 0xE8	; 232
 372:	93 e0       	ldi	r25, 0x03	; 3
 374:	d7 de       	rcall	.-594    	; 0x124 <delay>
		PORTF &= 0xf0;
 376:	81 b3       	in	r24, 0x11	; 17
 378:	80 7f       	andi	r24, 0xF0	; 240
 37a:	81 bb       	out	0x11, r24	; 17
		if(state != 1)
 37c:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <state>
 380:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <state+0x1>
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	d1 f4       	brne	.+52     	; 0x3bc <rotate+0x68>
		return;
		
		PORTF |= 0x4;
 388:	8a 9a       	sbi	0x11, 2	; 17
		delay(1000);
 38a:	88 ee       	ldi	r24, 0xE8	; 232
 38c:	93 e0       	ldi	r25, 0x03	; 3
 38e:	ca de       	rcall	.-620    	; 0x124 <delay>
		PORTF &= 0xf0;
 390:	81 b3       	in	r24, 0x11	; 17
 392:	80 7f       	andi	r24, 0xF0	; 240
 394:	81 bb       	out	0x11, r24	; 17
		if(state != 1)
 396:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <state>
 39a:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <state+0x1>
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	69 f4       	brne	.+26     	; 0x3bc <rotate+0x68>
		return;
		
		PORTF |= 0x8;
		delay(1000);
 3a2:	8b 9a       	sbi	0x11, 3	; 17
 3a4:	88 ee       	ldi	r24, 0xE8	; 232
 3a6:	93 e0       	ldi	r25, 0x03	; 3
 3a8:	bd de       	rcall	.-646    	; 0x124 <delay>
		PORTF &= 0xf0;
 3aa:	81 b3       	in	r24, 0x11	; 17
 3ac:	80 7f       	andi	r24, 0xF0	; 240
 3ae:	81 bb       	out	0x11, r24	; 17
		if(state != 1)
 3b0:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <state>
 3b4:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <state+0x1>
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	61 f2       	breq	.-104    	; 0x354 <rotate>
 3bc:	08 95       	ret

000003be <flash>:

// flash the lights for 200 mSec and off for 1 sec
void flash() {
	//decrement counter 40 for 200 ms
	while(1) {
		PORTF |= 0x0f;
 3be:	81 b3       	in	r24, 0x11	; 17
 3c0:	8f 60       	ori	r24, 0x0F	; 15
 3c2:	81 bb       	out	0x11, r24	; 17
		delay(200);
 3c4:	88 ec       	ldi	r24, 0xC8	; 200
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	ad de       	rcall	.-678    	; 0x124 <delay>
		if(state != 2) {
 3ca:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <state>
 3ce:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <state+0x1>
 3d2:	02 97       	sbiw	r24, 0x02	; 2
 3d4:	21 f0       	breq	.+8      	; 0x3de <flash+0x20>
			PORTF &= 0xf0;
 3d6:	81 b3       	in	r24, 0x11	; 17
 3d8:	80 7f       	andi	r24, 0xF0	; 240
 3da:	81 bb       	out	0x11, r24	; 17
			return;
 3dc:	08 95       	ret
		}
		PORTF &= 0xf0;
 3de:	81 b3       	in	r24, 0x11	; 17
 3e0:	80 7f       	andi	r24, 0xF0	; 240
 3e2:	81 bb       	out	0x11, r24	; 17
		delay(1000);
 3e4:	88 ee       	ldi	r24, 0xE8	; 232
 3e6:	93 e0       	ldi	r25, 0x03	; 3
 3e8:	9d de       	rcall	.-710    	; 0x124 <delay>
		if(state != 2) {
 3ea:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <state>
 3ee:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <state+0x1>
 3f2:	02 97       	sbiw	r24, 0x02	; 2
 3f4:	21 f3       	breq	.-56     	; 0x3be <flash>
 3f6:	08 95       	ret

000003f8 <main>:
#include "buttonFlashInt.h"


int main(void)
{
	DDRF = 0x0f;
 3f8:	8f e0       	ldi	r24, 0x0F	; 15
 3fa:	80 bb       	out	0x10, r24	; 16
	PORTF |= 0xc0;
 3fc:	81 b3       	in	r24, 0x11	; 17
 3fe:	80 6c       	ori	r24, 0xC0	; 192
 400:	81 bb       	out	0x11, r24	; 17
	state = 0;
 402:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <state+0x1>
 406:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <state>
	
    while (1) 
    {
	    switch(state) {
 40a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <state>
 40e:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <state+0x1>
 412:	81 30       	cpi	r24, 0x01	; 1
 414:	91 05       	cpc	r25, r1
 416:	39 f0       	breq	.+14     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 418:	82 30       	cpi	r24, 0x02	; 2
 41a:	91 05       	cpc	r25, r1
 41c:	31 f0       	breq	.+12     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 41e:	00 97       	sbiw	r24, 0x00	; 0
 420:	c1 f7       	brne	.-16     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
			case 0:
				off();
 422:	88 df       	rcall	.-240    	; 0x334 <off>
				break;
		    case 1:
				rotate();
 424:	f2 cf       	rjmp	.-28     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
				break;
 426:	96 df       	rcall	.-212    	; 0x354 <rotate>
		    case 2:
				flash();
 428:	f0 cf       	rjmp	.-32     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 42a:	c9 df       	rcall	.-110    	; 0x3be <flash>
				break;
 42c:	ee cf       	rjmp	.-36     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>

0000042e <__vector_9>:
	    }
    }
}

ISR(PCINT0_vect) {
 42e:	1f 92       	push	r1
 430:	0f 92       	push	r0
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	0f 92       	push	r0
 436:	11 24       	eor	r1, r1
	// your interrupt handler code
}
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0
 43e:	1f 90       	pop	r1
 440:	18 95       	reti

00000442 <__umulhisi3>:
 442:	a2 9f       	mul	r26, r18
 444:	b0 01       	movw	r22, r0
 446:	b3 9f       	mul	r27, r19
 448:	c0 01       	movw	r24, r0
 44a:	a3 9f       	mul	r26, r19
 44c:	70 0d       	add	r23, r0
 44e:	81 1d       	adc	r24, r1
 450:	11 24       	eor	r1, r1
 452:	91 1d       	adc	r25, r1
 454:	b2 9f       	mul	r27, r18
 456:	70 0d       	add	r23, r0
 458:	81 1d       	adc	r24, r1
 45a:	11 24       	eor	r1, r1
 45c:	91 1d       	adc	r25, r1
 45e:	08 95       	ret

00000460 <_exit>:
 460:	f8 94       	cli

00000462 <__stop_program>:
 462:	ff cf       	rjmp	.-2      	; 0x462 <__stop_program>
