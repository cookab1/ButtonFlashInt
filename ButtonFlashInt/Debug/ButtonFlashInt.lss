
ButtonFlashInt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  000003e0  00000474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080020c  0080020c  00000480  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001040  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d5c  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000625  00000000  00000000  000022f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  0000291c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061f  00000000  00000000  000029c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c7  00000000  00000000  00002fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000030ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c1       	rjmp	.+730    	; 0x308 <__vector_11>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 ee       	ldi	r30, 0xE0	; 224
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 31       	cpi	r26, 0x1A	; 26
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	bb d0       	rcall	.+374    	; 0x296 <main>
 120:	5d c1       	rjmp	.+698    	; 0x3dc <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <checkButton>:
		}
	}
}

int checkButton() {
	PORTF |= 1;
 124:	88 9a       	sbi	0x11, 0	; 17
	if(button0pressed) {// || button1pressed) {
 126:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <button0pressed>
 12a:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <button0pressed+0x1>
 12e:	00 97       	sbiw	r24, 0x00	; 0
 130:	79 f1       	breq	.+94     	; 0x190 <checkButton+0x6c>
		if(button0pressed) {
 132:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <button0pressed>
 136:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <button0pressed+0x1>
 13a:	89 2b       	or	r24, r25
 13c:	a9 f0       	breq	.+42     	; 0x168 <checkButton+0x44>
			button0pressed = 0;
 13e:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <button0pressed+0x1>
 142:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <button0pressed>
			state = stateTable[0][state];
 146:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <__data_end>
 14a:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <__data_end+0x1>
 14e:	ee 0f       	add	r30, r30
 150:	ff 1f       	adc	r31, r31
 152:	e0 50       	subi	r30, 0x00	; 0
 154:	fe 4f       	sbci	r31, 0xFE	; 254
 156:	80 81       	ld	r24, Z
 158:	91 81       	ldd	r25, Z+1	; 0x01
 15a:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__data_end+0x1>
 15e:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
		} else {
			button1pressed = 0;
			state = stateTable[1][state];
		}
		return 1;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	08 95       	ret
	if(button0pressed) {// || button1pressed) {
		if(button0pressed) {
			button0pressed = 0;
			state = stateTable[0][state];
		} else {
			button1pressed = 0;
 168:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <button1pressed+0x1>
 16c:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <button1pressed>
			state = stateTable[1][state];
 170:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <__data_end>
 174:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <__data_end+0x1>
 178:	ee 0f       	add	r30, r30
 17a:	ff 1f       	adc	r31, r31
 17c:	ea 5f       	subi	r30, 0xFA	; 250
 17e:	fd 4f       	sbci	r31, 0xFD	; 253
 180:	80 81       	ld	r24, Z
 182:	91 81       	ldd	r25, Z+1	; 0x01
 184:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__data_end+0x1>
 188:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
		}
		return 1;
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
 190:	08 95       	ret

00000192 <delay>:

void delay(unsigned int msec) {
	
	unsigned int count = msec / 5;
 192:	9c 01       	movw	r18, r24
 194:	ad ec       	ldi	r26, 0xCD	; 205
 196:	bc ec       	ldi	r27, 0xCC	; 204
 198:	12 d1       	rcall	.+548    	; 0x3be <__umulhisi3>
 19a:	96 95       	lsr	r25
 19c:	87 95       	ror	r24
 19e:	96 95       	lsr	r25
 1a0:	87 95       	ror	r24
 1a2:	1b c0       	rjmp	.+54     	; 0x1da <delay+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a4:	ef e1       	ldi	r30, 0x1F	; 31
 1a6:	fe e4       	ldi	r31, 0x4E	; 78
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <delay+0x16>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <delay+0x1c>
 1ae:	00 00       	nop
	int done = 0;
	
	while(!done) {
		while((count > 0) && (!(button0pressed || button1pressed))) {
			_delay_ms(5);
			count--;	
 1b0:	01 97       	sbiw	r24, 0x01	; 1
	
	unsigned int count = msec / 5;
	int done = 0;
	
	while(!done) {
		while((count > 0) && (!(button0pressed || button1pressed))) {
 1b2:	39 f1       	breq	.+78     	; 0x202 <delay+0x70>
 1b4:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <button0pressed>
 1b8:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <button0pressed+0x1>
 1bc:	23 2b       	or	r18, r19
 1be:	d9 f4       	brne	.+54     	; 0x1f6 <delay+0x64>
 1c0:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <button1pressed>
 1c4:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <button1pressed+0x1>
 1c8:	23 2b       	or	r18, r19
 1ca:	61 f3       	breq	.-40     	; 0x1a4 <delay+0x12>
 1cc:	14 c0       	rjmp	.+40     	; 0x1f6 <delay+0x64>
			_delay_ms(5);
			count--;	
		}
		if(count == 0 || button0pressed || button1pressed)
 1ce:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <button1pressed>
 1d2:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <button1pressed+0x1>
 1d6:	23 2b       	or	r18, r19
 1d8:	a1 f4       	brne	.+40     	; 0x202 <delay+0x70>
	
	unsigned int count = msec / 5;
	int done = 0;
	
	while(!done) {
		while((count > 0) && (!(button0pressed || button1pressed))) {
 1da:	00 97       	sbiw	r24, 0x00	; 0
 1dc:	91 f0       	breq	.+36     	; 0x202 <delay+0x70>
 1de:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <button0pressed>
 1e2:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <button0pressed+0x1>
 1e6:	23 2b       	or	r18, r19
 1e8:	31 f4       	brne	.+12     	; 0x1f6 <delay+0x64>
 1ea:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <button1pressed>
 1ee:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <button1pressed+0x1>
 1f2:	23 2b       	or	r18, r19
 1f4:	b9 f2       	breq	.-82     	; 0x1a4 <delay+0x12>
			_delay_ms(5);
			count--;	
		}
		if(count == 0 || button0pressed || button1pressed)
 1f6:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <button0pressed>
 1fa:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <button0pressed+0x1>
 1fe:	23 2b       	or	r18, r19
 200:	31 f3       	breq	.-52     	; 0x1ce <delay+0x3c>
 202:	08 95       	ret

00000204 <off>:
int stateTable[2][3] = {{1,0,1},
						{2,2,0}};

//lights are off
void off() {
	if((PORTF & 0x0f) != 0)
 204:	81 b3       	in	r24, 0x11	; 17
 206:	8f 70       	andi	r24, 0x0F	; 15
 208:	19 f0       	breq	.+6      	; 0x210 <off+0xc>
	PORTF &= 0xf0;
 20a:	81 b3       	in	r24, 0x11	; 17
 20c:	80 7f       	andi	r24, 0xF0	; 240
 20e:	81 bb       	out	0x11, r24	; 17
	
	while(1) {
		delay(1000);
 210:	88 ee       	ldi	r24, 0xE8	; 232
 212:	93 e0       	ldi	r25, 0x03	; 3
 214:	be df       	rcall	.-132    	; 0x192 <delay>
		if(checkButton())
 216:	86 df       	rcall	.-244    	; 0x124 <checkButton>
 218:	89 2b       	or	r24, r25
 21a:	d1 f3       	breq	.-12     	; 0x210 <off+0xc>
 21c:	08 95       	ret

0000021e <rotate>:
			return;
	}
}
 21e:	88 9a       	sbi	0x11, 0	; 17

//rotate the lights being on from 0 - 3 each in turn
void rotate() {
	while(1) {
		PORTF |= 0x1;
		delay(1000);
 220:	88 ee       	ldi	r24, 0xE8	; 232
 222:	93 e0       	ldi	r25, 0x03	; 3
 224:	b6 df       	rcall	.-148    	; 0x192 <delay>
		PORTF &= 0xf0;
 226:	81 b3       	in	r24, 0x11	; 17
 228:	80 7f       	andi	r24, 0xF0	; 240
		if(checkButton())
 22a:	81 bb       	out	0x11, r24	; 17
 22c:	7b df       	rcall	.-266    	; 0x124 <checkButton>
 22e:	89 2b       	or	r24, r25
 230:	f1 f4       	brne	.+60     	; 0x26e <rotate+0x50>
			return;
		
		PORTF |= 0x2;
 232:	89 9a       	sbi	0x11, 1	; 17
		delay(1000);
 234:	88 ee       	ldi	r24, 0xE8	; 232
 236:	93 e0       	ldi	r25, 0x03	; 3
 238:	ac df       	rcall	.-168    	; 0x192 <delay>
		PORTF &= 0xf0;
 23a:	81 b3       	in	r24, 0x11	; 17
 23c:	80 7f       	andi	r24, 0xF0	; 240
		if(checkButton())
 23e:	81 bb       	out	0x11, r24	; 17
 240:	71 df       	rcall	.-286    	; 0x124 <checkButton>
 242:	89 2b       	or	r24, r25
			return;
		
		PORTF |= 0x4;
 244:	a1 f4       	brne	.+40     	; 0x26e <rotate+0x50>
		delay(1000);
 246:	8a 9a       	sbi	0x11, 2	; 17
 248:	88 ee       	ldi	r24, 0xE8	; 232
 24a:	93 e0       	ldi	r25, 0x03	; 3
		PORTF &= 0xf0;
 24c:	a2 df       	rcall	.-188    	; 0x192 <delay>
 24e:	81 b3       	in	r24, 0x11	; 17
 250:	80 7f       	andi	r24, 0xF0	; 240
		if(checkButton())
 252:	81 bb       	out	0x11, r24	; 17
 254:	67 df       	rcall	.-306    	; 0x124 <checkButton>
 256:	89 2b       	or	r24, r25
			return;
		
		PORTF |= 0x8;
 258:	51 f4       	brne	.+20     	; 0x26e <rotate+0x50>
		delay(1000);
 25a:	8b 9a       	sbi	0x11, 3	; 17
 25c:	88 ee       	ldi	r24, 0xE8	; 232
 25e:	93 e0       	ldi	r25, 0x03	; 3
		PORTF &= 0xf0;
 260:	98 df       	rcall	.-208    	; 0x192 <delay>
 262:	81 b3       	in	r24, 0x11	; 17
 264:	80 7f       	andi	r24, 0xF0	; 240
		if(checkButton())
 266:	81 bb       	out	0x11, r24	; 17
 268:	5d df       	rcall	.-326    	; 0x124 <checkButton>
 26a:	89 2b       	or	r24, r25
 26c:	c1 f2       	breq	.-80     	; 0x21e <rotate>
 26e:	08 95       	ret

00000270 <flash>:

// flash the lights for 200 mSec and off for 1 sec
void flash() {
	//decrement counter 40 for 200 ms
	while(1) {
		PORTF |= 0x0f;  //turn lights on
 270:	81 b3       	in	r24, 0x11	; 17
 272:	8f 60       	ori	r24, 0x0F	; 15
 274:	81 bb       	out	0x11, r24	; 17
		delay(200);		//turn lights off
 276:	88 ec       	ldi	r24, 0xC8	; 200
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	8b df       	rcall	.-234    	; 0x192 <delay>
		PORTF &= 0xf0;
 27c:	81 b3       	in	r24, 0x11	; 17
 27e:	80 7f       	andi	r24, 0xF0	; 240
		if(checkButton()) {
 280:	81 bb       	out	0x11, r24	; 17
 282:	50 df       	rcall	.-352    	; 0x124 <checkButton>
 284:	89 2b       	or	r24, r25
 286:	31 f4       	brne	.+12     	; 0x294 <flash+0x24>
			return;
		}
		delay(1000);
 288:	88 ee       	ldi	r24, 0xE8	; 232
 28a:	93 e0       	ldi	r25, 0x03	; 3
		if(checkButton()) {
 28c:	82 df       	rcall	.-252    	; 0x192 <delay>
 28e:	4a df       	rcall	.-364    	; 0x124 <checkButton>
 290:	89 2b       	or	r24, r25
 292:	71 f3       	breq	.-36     	; 0x270 <flash>
 294:	08 95       	ret

00000296 <main>:
#include "buttonFlashInt.h"


int main(void)
{
	sei(); //set global interrupt enable
 296:	78 94       	sei
	DDRF = 0x0f;
 298:	8f e0       	ldi	r24, 0x0F	; 15
 29a:	80 bb       	out	0x10, r24	; 16
	DDRK = 0x0;
 29c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
	PCMSK2 = 0x3;
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x70006d>
	
	PORTK = 0x3;
 2a6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	PCICR = 0x4;
 2aa:	84 e0       	ldi	r24, 0x04	; 4
 2ac:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x700068>
	PORTF &= 0x0;
 2b0:	81 b3       	in	r24, 0x11	; 17
 2b2:	11 ba       	out	0x11, r1	; 17
	
	state = 0;
 2b4:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <state+0x1>
 2b8:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <state>
	button0pressed = 0;
 2bc:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <button0pressed+0x1>
 2c0:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <button0pressed>
	button1pressed = 0;
 2c4:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <button1pressed+0x1>
 2c8:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <button1pressed>
	bothPressed = 0;
 2cc:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <bothPressed+0x1>
 2d0:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <bothPressed>
	button0 = 0;
 2d4:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <button0+0x1>
 2d8:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <button0>
	button1 = 0;
 2dc:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <button1+0x1>
 2e0:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <button1>
	
    while (1) 
    {
	    switch(state) {
 2e4:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <state>
 2e8:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <state+0x1>
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	91 05       	cpc	r25, r1
 2f0:	39 f0       	breq	.+14     	; 0x300 <main+0x6a>
 2f2:	82 30       	cpi	r24, 0x02	; 2
 2f4:	91 05       	cpc	r25, r1
 2f6:	31 f0       	breq	.+12     	; 0x304 <main+0x6e>
 2f8:	00 97       	sbiw	r24, 0x00	; 0
 2fa:	c1 f7       	brne	.-16     	; 0x2ec <main+0x56>
			case 0:
				off();
 2fc:	83 df       	rcall	.-250    	; 0x204 <off>
				break;
		    case 1:
				rotate();
 2fe:	f2 cf       	rjmp	.-28     	; 0x2e4 <main+0x4e>
				break;
 300:	8e df       	rcall	.-228    	; 0x21e <rotate>
		    case 2:
				flash();
 302:	f0 cf       	rjmp	.-32     	; 0x2e4 <main+0x4e>
 304:	b5 df       	rcall	.-150    	; 0x270 <flash>
				break;
 306:	ee cf       	rjmp	.-36     	; 0x2e4 <main+0x4e>

00000308 <__vector_11>:
	    }
    }
}

ISR(PCINT2_vect) {
 308:	1f 92       	push	r1
 30a:	0f 92       	push	r0
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	0f 92       	push	r0
 310:	11 24       	eor	r1, r1
 312:	8f 93       	push	r24
 314:	9f 93       	push	r25
	switch(PINK & 0x3) {
 316:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 31a:	83 70       	andi	r24, 0x03	; 3
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	81 f1       	breq	.+96     	; 0x380 <__vector_11+0x78>
 320:	c8 f1       	brcs	.+114    	; 0x394 <__vector_11+0x8c>
 322:	82 30       	cpi	r24, 0x02	; 2
 324:	19 f1       	breq	.+70     	; 0x36c <__vector_11+0x64>
 326:	83 30       	cpi	r24, 0x03	; 3
 328:	09 f0       	breq	.+2      	; 0x32c <__vector_11+0x24>
 32a:	42 c0       	rjmp	.+132    	; 0x3b0 <__vector_11+0xa8>
		case 0x3:				//button released
			if(button0) {		//if button0 released
 32c:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <button0>
 330:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <button0+0x1>
 334:	89 2b       	or	r24, r25
 336:	69 f0       	breq	.+26     	; 0x352 <__vector_11+0x4a>
				PORTF &= 0;
 338:	81 b3       	in	r24, 0x11	; 17
 33a:	11 ba       	out	0x11, r1	; 17
				button0 = 0;
 33c:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <button0+0x1>
 340:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <button0>
				button0pressed = 1;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <button0pressed+0x1>
 34c:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <button0pressed>
 350:	2f c0       	rjmp	.+94     	; 0x3b0 <__vector_11+0xa8>
			} else {			//else button1 was released
				PORTF &= 0;
 352:	81 b3       	in	r24, 0x11	; 17
 354:	11 ba       	out	0x11, r1	; 17
				button1 = 0;
 356:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <button1+0x1>
 35a:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <button1>
				button1pressed = 1;
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <button1pressed+0x1>
 366:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <button1pressed>
 36a:	22 c0       	rjmp	.+68     	; 0x3b0 <__vector_11+0xa8>
			}
			break;
		case 0x2:			//button0 pressed
			PORTF |= 0xf;
 36c:	81 b3       	in	r24, 0x11	; 17
 36e:	8f 60       	ori	r24, 0x0F	; 15
 370:	81 bb       	out	0x11, r24	; 17
			button0 = 1;
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <button0+0x1>
 37a:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <button0>
			break;
 37e:	18 c0       	rjmp	.+48     	; 0x3b0 <__vector_11+0xa8>
		case 0x1:			//button1 pressed
			PORTF |= 0xf;
 380:	81 b3       	in	r24, 0x11	; 17
 382:	8f 60       	ori	r24, 0x0F	; 15
 384:	81 bb       	out	0x11, r24	; 17
			button1 = 1;
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <button1+0x1>
 38e:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <button1>
			break;
 392:	0e c0       	rjmp	.+28     	; 0x3b0 <__vector_11+0xa8>
		case 0x0:			//both are pressed
			bothPressed = 1;
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <bothPressed+0x1>
 39c:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <bothPressed>
			button1 = 1;
 3a0:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <button1+0x1>
 3a4:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <button1>
			button0 = 1;
 3a8:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <button0+0x1>
 3ac:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <button0>
			break;
	}
}
 3b0:	9f 91       	pop	r25
 3b2:	8f 91       	pop	r24
 3b4:	0f 90       	pop	r0
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	0f 90       	pop	r0
 3ba:	1f 90       	pop	r1
 3bc:	18 95       	reti

000003be <__umulhisi3>:
 3be:	a2 9f       	mul	r26, r18
 3c0:	b0 01       	movw	r22, r0
 3c2:	b3 9f       	mul	r27, r19
 3c4:	c0 01       	movw	r24, r0
 3c6:	a3 9f       	mul	r26, r19
 3c8:	70 0d       	add	r23, r0
 3ca:	81 1d       	adc	r24, r1
 3cc:	11 24       	eor	r1, r1
 3ce:	91 1d       	adc	r25, r1
 3d0:	b2 9f       	mul	r27, r18
 3d2:	70 0d       	add	r23, r0
 3d4:	81 1d       	adc	r24, r1
 3d6:	11 24       	eor	r1, r1
 3d8:	91 1d       	adc	r25, r1
 3da:	08 95       	ret

000003dc <_exit>:
 3dc:	f8 94       	cli

000003de <__stop_program>:
 3de:	ff cf       	rjmp	.-2      	; 0x3de <__stop_program>
