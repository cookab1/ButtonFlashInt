
ButtonFlashInt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  0000042c  000004c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000042c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080020c  0080020c  000004cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001040  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d5c  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000064f  00000000  00000000  00002340  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00002990  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061f  00000000  00000000  00002a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c7  00000000  00000000  0000305b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00003122  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6a c1       	rjmp	.+724    	; 0x302 <__vector_11>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e2       	ldi	r30, 0x2C	; 44
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 31       	cpi	r26, 0x1A	; 26
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	c0 d0       	rcall	.+384    	; 0x2a0 <main>
 120:	83 c1       	rjmp	.+774    	; 0x428 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <checkButton>:
		}
	}
}

int checkButton() {
	if(button0pressed || button1pressed) {
 124:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <button0pressed>
 128:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <button0pressed+0x1>
 12c:	89 2b       	or	r24, r25
 12e:	31 f4       	brne	.+12     	; 0x13c <checkButton+0x18>
 130:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <button1pressed>
 134:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <button1pressed+0x1>
 138:	00 97       	sbiw	r24, 0x00	; 0
 13a:	79 f1       	breq	.+94     	; 0x19a <checkButton+0x76>
		if(button0pressed) {
 13c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <button0pressed>
 140:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <button0pressed+0x1>
 144:	89 2b       	or	r24, r25
 146:	a9 f0       	breq	.+42     	; 0x172 <checkButton+0x4e>
			button0pressed = 0;
 148:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <button0pressed+0x1>
 14c:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <button0pressed>
			state = stateTable[0][state];
 150:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <__data_end>
 154:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <__data_end+0x1>
 158:	ee 0f       	add	r30, r30
 15a:	ff 1f       	adc	r31, r31
 15c:	e0 50       	subi	r30, 0x00	; 0
 15e:	fe 4f       	sbci	r31, 0xFE	; 254
 160:	80 81       	ld	r24, Z
 162:	91 81       	ldd	r25, Z+1	; 0x01
 164:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__data_end+0x1>
 168:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
			return 1;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	08 95       	ret
			} else {
			button1pressed = 0;
 172:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <button1pressed+0x1>
 176:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <button1pressed>
			state = stateTable[1][state];
 17a:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <__data_end>
 17e:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <__data_end+0x1>
 182:	ee 0f       	add	r30, r30
 184:	ff 1f       	adc	r31, r31
 186:	ea 5f       	subi	r30, 0xFA	; 250
 188:	fd 4f       	sbci	r31, 0xFD	; 253
 18a:	80 81       	ld	r24, Z
 18c:	91 81       	ldd	r25, Z+1	; 0x01
 18e:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__data_end+0x1>
 192:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
			return 1;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return 0;
}
 19a:	08 95       	ret

0000019c <delay>:

void delay(unsigned int msec) {
	
	unsigned int count = msec / 5;
 19c:	9c 01       	movw	r18, r24
 19e:	ad ec       	ldi	r26, 0xCD	; 205
 1a0:	bc ec       	ldi	r27, 0xCC	; 204
 1a2:	33 d1       	rcall	.+614    	; 0x40a <__umulhisi3>
 1a4:	96 95       	lsr	r25
 1a6:	87 95       	ror	r24
 1a8:	96 95       	lsr	r25
 1aa:	87 95       	ror	r24
 1ac:	1b c0       	rjmp	.+54     	; 0x1e4 <delay+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	ef e1       	ldi	r30, 0x1F	; 31
 1b0:	fe e4       	ldi	r31, 0x4E	; 78
 1b2:	31 97       	sbiw	r30, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <delay+0x16>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <delay+0x1c>
 1b8:	00 00       	nop
	int done = 0;
	
	while(!done) {
		while((count > 0) && (!(button0pressed || button1pressed))) {
			_delay_ms(5);
			count--;	
 1ba:	01 97       	sbiw	r24, 0x01	; 1
	
	unsigned int count = msec / 5;
	int done = 0;
	
	while(!done) {
		while((count > 0) && (!(button0pressed || button1pressed))) {
 1bc:	39 f1       	breq	.+78     	; 0x20c <delay+0x70>
 1be:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <button0pressed>
 1c2:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <button0pressed+0x1>
 1c6:	23 2b       	or	r18, r19
 1c8:	d9 f4       	brne	.+54     	; 0x200 <delay+0x64>
 1ca:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <button1pressed>
 1ce:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <button1pressed+0x1>
 1d2:	23 2b       	or	r18, r19
 1d4:	61 f3       	breq	.-40     	; 0x1ae <delay+0x12>
 1d6:	14 c0       	rjmp	.+40     	; 0x200 <delay+0x64>
			_delay_ms(5);
			count--;	
		}
		if(count == 0 || button0pressed || button1pressed)
 1d8:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <button1pressed>
 1dc:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <button1pressed+0x1>
 1e0:	23 2b       	or	r18, r19
 1e2:	a1 f4       	brne	.+40     	; 0x20c <delay+0x70>
	
	unsigned int count = msec / 5;
	int done = 0;
	
	while(!done) {
		while((count > 0) && (!(button0pressed || button1pressed))) {
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	91 f0       	breq	.+36     	; 0x20c <delay+0x70>
 1e8:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <button0pressed>
 1ec:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <button0pressed+0x1>
 1f0:	23 2b       	or	r18, r19
 1f2:	31 f4       	brne	.+12     	; 0x200 <delay+0x64>
 1f4:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <button1pressed>
 1f8:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <button1pressed+0x1>
 1fc:	23 2b       	or	r18, r19
 1fe:	b9 f2       	breq	.-82     	; 0x1ae <delay+0x12>
			_delay_ms(5);
			count--;	
		}
		if(count == 0 || button0pressed || button1pressed)
 200:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <button0pressed>
 204:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <button0pressed+0x1>
 208:	23 2b       	or	r18, r19
 20a:	31 f3       	breq	.-52     	; 0x1d8 <delay+0x3c>
 20c:	08 95       	ret

0000020e <off>:
int stateTable[2][3] = {{1,0,1},
						{2,2,0}};

//lights are off
void off() {
	if((PORTF & 0x0f) != 0)
 20e:	81 b3       	in	r24, 0x11	; 17
 210:	8f 70       	andi	r24, 0x0F	; 15
 212:	19 f0       	breq	.+6      	; 0x21a <off+0xc>
	PORTF &= 0xf0;
 214:	81 b3       	in	r24, 0x11	; 17
 216:	80 7f       	andi	r24, 0xF0	; 240
 218:	81 bb       	out	0x11, r24	; 17
	
	while(1) {
		delay(1000);
 21a:	88 ee       	ldi	r24, 0xE8	; 232
 21c:	93 e0       	ldi	r25, 0x03	; 3
 21e:	be df       	rcall	.-132    	; 0x19c <delay>
		if(checkButton())
 220:	81 df       	rcall	.-254    	; 0x124 <checkButton>
 222:	89 2b       	or	r24, r25
 224:	d1 f3       	breq	.-12     	; 0x21a <off+0xc>
 226:	08 95       	ret

00000228 <rotate>:
			return;
	}
}
 228:	88 9a       	sbi	0x11, 0	; 17

//rotate the lights being on from 0 - 3 each in turn
void rotate() {
	while(1) {
		PORTF |= 0x1;
		delay(1000);
 22a:	88 ee       	ldi	r24, 0xE8	; 232
 22c:	93 e0       	ldi	r25, 0x03	; 3
 22e:	b6 df       	rcall	.-148    	; 0x19c <delay>
		PORTF &= 0xf0;
 230:	81 b3       	in	r24, 0x11	; 17
 232:	80 7f       	andi	r24, 0xF0	; 240
		if(checkButton())
 234:	81 bb       	out	0x11, r24	; 17
 236:	76 df       	rcall	.-276    	; 0x124 <checkButton>
 238:	89 2b       	or	r24, r25
 23a:	f1 f4       	brne	.+60     	; 0x278 <rotate+0x50>
			return;
		
		PORTF |= 0x2;
 23c:	89 9a       	sbi	0x11, 1	; 17
		delay(1000);
 23e:	88 ee       	ldi	r24, 0xE8	; 232
 240:	93 e0       	ldi	r25, 0x03	; 3
 242:	ac df       	rcall	.-168    	; 0x19c <delay>
		PORTF &= 0xf0;
 244:	81 b3       	in	r24, 0x11	; 17
 246:	80 7f       	andi	r24, 0xF0	; 240
		if(checkButton())
 248:	81 bb       	out	0x11, r24	; 17
 24a:	6c df       	rcall	.-296    	; 0x124 <checkButton>
 24c:	89 2b       	or	r24, r25
			return;
		
		PORTF |= 0x4;
 24e:	a1 f4       	brne	.+40     	; 0x278 <rotate+0x50>
		delay(1000);
 250:	8a 9a       	sbi	0x11, 2	; 17
 252:	88 ee       	ldi	r24, 0xE8	; 232
 254:	93 e0       	ldi	r25, 0x03	; 3
		PORTF &= 0xf0;
 256:	a2 df       	rcall	.-188    	; 0x19c <delay>
 258:	81 b3       	in	r24, 0x11	; 17
 25a:	80 7f       	andi	r24, 0xF0	; 240
		if(checkButton())
 25c:	81 bb       	out	0x11, r24	; 17
 25e:	62 df       	rcall	.-316    	; 0x124 <checkButton>
 260:	89 2b       	or	r24, r25
			return;
		
		PORTF |= 0x8;
 262:	51 f4       	brne	.+20     	; 0x278 <rotate+0x50>
		delay(1000);
 264:	8b 9a       	sbi	0x11, 3	; 17
 266:	88 ee       	ldi	r24, 0xE8	; 232
 268:	93 e0       	ldi	r25, 0x03	; 3
		PORTF &= 0xf0;
 26a:	98 df       	rcall	.-208    	; 0x19c <delay>
 26c:	81 b3       	in	r24, 0x11	; 17
 26e:	80 7f       	andi	r24, 0xF0	; 240
		if(checkButton())
 270:	81 bb       	out	0x11, r24	; 17
 272:	58 df       	rcall	.-336    	; 0x124 <checkButton>
 274:	89 2b       	or	r24, r25
 276:	c1 f2       	breq	.-80     	; 0x228 <rotate>
 278:	08 95       	ret

0000027a <flash>:

// flash the lights for 200 mSec and off for 1 sec
void flash() {
	//decrement counter 40 for 200 ms
	while(1) {
		PORTF |= 0x0f;  //turn lights on
 27a:	81 b3       	in	r24, 0x11	; 17
 27c:	8f 60       	ori	r24, 0x0F	; 15
 27e:	81 bb       	out	0x11, r24	; 17
		delay(200);		//turn lights off
 280:	88 ec       	ldi	r24, 0xC8	; 200
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	8b df       	rcall	.-234    	; 0x19c <delay>
		PORTF &= 0xf0;
 286:	81 b3       	in	r24, 0x11	; 17
 288:	80 7f       	andi	r24, 0xF0	; 240
		if(checkButton()) {
 28a:	81 bb       	out	0x11, r24	; 17
 28c:	4b df       	rcall	.-362    	; 0x124 <checkButton>
 28e:	89 2b       	or	r24, r25
 290:	31 f4       	brne	.+12     	; 0x29e <flash+0x24>
			return;
		}
		delay(1000);
 292:	88 ee       	ldi	r24, 0xE8	; 232
 294:	93 e0       	ldi	r25, 0x03	; 3
		if(checkButton()) {
 296:	82 df       	rcall	.-252    	; 0x19c <delay>
 298:	45 df       	rcall	.-374    	; 0x124 <checkButton>
 29a:	89 2b       	or	r24, r25
 29c:	71 f3       	breq	.-36     	; 0x27a <flash>
 29e:	08 95       	ret

000002a0 <main>:
#include "buttonFlashInt.h"


int main(void)
{
	sei(); //set global interrupt enable
 2a0:	78 94       	sei
	DDRF = 0x0f;
 2a2:	8f e0       	ldi	r24, 0x0F	; 15
 2a4:	80 bb       	out	0x10, r24	; 16
	DDRK = 0x0;
 2a6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
	PCMSK2 = 0x3;
 2aa:	83 e0       	ldi	r24, 0x03	; 3
 2ac:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x70006d>
	
	PORTK = 0x3;
 2b0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	PCICR = 0x4;
 2b4:	84 e0       	ldi	r24, 0x04	; 4
 2b6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x700068>
	PORTF &= 0x0;
 2ba:	81 b3       	in	r24, 0x11	; 17
 2bc:	11 ba       	out	0x11, r1	; 17
	
	state = 0;
 2be:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <state+0x1>
 2c2:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <state>
	button0pressed = 0;
 2c6:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <button0pressed+0x1>
 2ca:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <button0pressed>
	button1pressed = 0;
 2ce:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <button1pressed+0x1>
 2d2:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <button1pressed>
	bothPressed = 0;
 2d6:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <bothPressed+0x1>
 2da:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <bothPressed>
	
    while (1) 
    {
	    switch(state) {
 2de:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <state>
 2e2:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <state+0x1>
 2e6:	81 30       	cpi	r24, 0x01	; 1
 2e8:	91 05       	cpc	r25, r1
 2ea:	39 f0       	breq	.+14     	; 0x2fa <main+0x5a>
 2ec:	82 30       	cpi	r24, 0x02	; 2
 2ee:	91 05       	cpc	r25, r1
 2f0:	31 f0       	breq	.+12     	; 0x2fe <main+0x5e>
 2f2:	00 97       	sbiw	r24, 0x00	; 0
 2f4:	c1 f7       	brne	.-16     	; 0x2e6 <main+0x46>
			case 0:
				off();
 2f6:	8b df       	rcall	.-234    	; 0x20e <off>
				break;
		    case 1:
				rotate();
 2f8:	f2 cf       	rjmp	.-28     	; 0x2de <main+0x3e>
				break;
 2fa:	96 df       	rcall	.-212    	; 0x228 <rotate>
		    case 2:
				flash();
 2fc:	f0 cf       	rjmp	.-32     	; 0x2de <main+0x3e>
 2fe:	bd df       	rcall	.-134    	; 0x27a <flash>
				break;
 300:	ee cf       	rjmp	.-36     	; 0x2de <main+0x3e>

00000302 <__vector_11>:
	    }
    }
}

ISR(PCINT2_vect) {
 302:	1f 92       	push	r1
 304:	0f 92       	push	r0
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	0f 92       	push	r0
 30a:	11 24       	eor	r1, r1
 30c:	8f 93       	push	r24
 30e:	9f 93       	push	r25
	if(bothPressed) {
 310:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <bothPressed>
 314:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <bothPressed+0x1>
 318:	89 2b       	or	r24, r25
 31a:	71 f1       	breq	.+92     	; 0x378 <__vector_11+0x76>
		bothPressed = 0;
 31c:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <bothPressed+0x1>
 320:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <bothPressed>
		switch(PINK & 0x3) {
 324:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 328:	83 70       	andi	r24, 0x03	; 3
 32a:	82 30       	cpi	r24, 0x02	; 2
 32c:	79 f0       	breq	.+30     	; 0x34c <__vector_11+0x4a>
 32e:	83 30       	cpi	r24, 0x03	; 3
 330:	21 f0       	breq	.+8      	; 0x33a <__vector_11+0x38>
 332:	81 30       	cpi	r24, 0x01	; 1
 334:	09 f0       	breq	.+2      	; 0x338 <__vector_11+0x36>
 336:	62 c0       	rjmp	.+196    	; 0x3fc <__vector_11+0xfa>
 338:	14 c0       	rjmp	.+40     	; 0x362 <__vector_11+0x60>
			case 0x3:			//both released
				button0 = 0;
 33a:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <button0+0x1>
 33e:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <button0>
				button1 = 0;
 342:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <button1+0x1>
 346:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <button1>
				break;
 34a:	58 c0       	rjmp	.+176    	; 0x3fc <__vector_11+0xfa>
			case 0x2:			//button1 released
				button1 = 0;
 34c:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <button1+0x1>
 350:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <button1>
				button1pressed = 1;
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <button1pressed+0x1>
 35c:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <button1pressed>
				break;
 360:	4d c0       	rjmp	.+154    	; 0x3fc <__vector_11+0xfa>
			case 0x1:			//button0 released
				button0 = 0;
 362:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <button0+0x1>
 366:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <button0>
				button0pressed = 1;
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <button0pressed+0x1>
 372:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <button0pressed>
				break;
 376:	42 c0       	rjmp	.+132    	; 0x3fc <__vector_11+0xfa>
		}
	} else {
		switch(PINK & 0x3) {
 378:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 37c:	83 70       	andi	r24, 0x03	; 3
 37e:	81 30       	cpi	r24, 0x01	; 1
 380:	41 f1       	breq	.+80     	; 0x3d2 <__vector_11+0xd0>
 382:	70 f1       	brcs	.+92     	; 0x3e0 <__vector_11+0xde>
 384:	82 30       	cpi	r24, 0x02	; 2
 386:	f1 f0       	breq	.+60     	; 0x3c4 <__vector_11+0xc2>
 388:	83 30       	cpi	r24, 0x03	; 3
 38a:	c1 f5       	brne	.+112    	; 0x3fc <__vector_11+0xfa>
			case 0x3:				//button released
				if(button0) {		//if button0 released
 38c:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <button0>
 390:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <button0+0x1>
 394:	89 2b       	or	r24, r25
 396:	59 f0       	breq	.+22     	; 0x3ae <__vector_11+0xac>
					button0 = 0;
 398:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <button0+0x1>
 39c:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <button0>
					button0pressed = 1;
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <button0pressed+0x1>
 3a8:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <button0pressed>
 3ac:	27 c0       	rjmp	.+78     	; 0x3fc <__vector_11+0xfa>
				} else {			//else button1 was released
					button1 = 0;
 3ae:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <button1+0x1>
 3b2:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <button1>
					button1pressed = 1;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <button1pressed+0x1>
 3be:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <button1pressed>
 3c2:	1c c0       	rjmp	.+56     	; 0x3fc <__vector_11+0xfa>
				}
				break;
			case 0x2:			//button0 pressed
				button0 = 1;
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <button0+0x1>
 3cc:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <button0>
				break;
 3d0:	15 c0       	rjmp	.+42     	; 0x3fc <__vector_11+0xfa>
			case 0x1:			//button1 pressed
				button1 = 1;
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <button1+0x1>
 3da:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <button1>
				break;
 3de:	0e c0       	rjmp	.+28     	; 0x3fc <__vector_11+0xfa>
			case 0x0:			//both are pressed
				bothPressed = 1;
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <bothPressed+0x1>
 3e8:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <bothPressed>
				button1 = 1;
 3ec:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <button1+0x1>
 3f0:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <button1>
				button0 = 1;
 3f4:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <button0+0x1>
 3f8:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <button0>
				break;
		}
	}
 3fc:	9f 91       	pop	r25
 3fe:	8f 91       	pop	r24
 400:	0f 90       	pop	r0
 402:	0f be       	out	0x3f, r0	; 63
 404:	0f 90       	pop	r0
 406:	1f 90       	pop	r1
 408:	18 95       	reti

0000040a <__umulhisi3>:
 40a:	a2 9f       	mul	r26, r18
 40c:	b0 01       	movw	r22, r0
 40e:	b3 9f       	mul	r27, r19
 410:	c0 01       	movw	r24, r0
 412:	a3 9f       	mul	r26, r19
 414:	70 0d       	add	r23, r0
 416:	81 1d       	adc	r24, r1
 418:	11 24       	eor	r1, r1
 41a:	91 1d       	adc	r25, r1
 41c:	b2 9f       	mul	r27, r18
 41e:	70 0d       	add	r23, r0
 420:	81 1d       	adc	r24, r1
 422:	11 24       	eor	r1, r1
 424:	91 1d       	adc	r25, r1
 426:	08 95       	ret

00000428 <_exit>:
 428:	f8 94       	cli

0000042a <__stop_program>:
 42a:	ff cf       	rjmp	.-2      	; 0x42a <__stop_program>
